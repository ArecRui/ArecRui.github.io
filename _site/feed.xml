<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="https://arecrui.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://arecrui.github.io/" rel="alternate" type="text/html" /><updated>2016-06-16T17:09:38+08:00</updated><id>https://arecrui.github.io/</id><title>Arec_Rui</title><subtitle>This is a personal website of Mr. Liang Zerui. This website is designed to collect all the learning notes.</subtitle><author><name>Liang Zerui</name></author><entry><title>Week 8 listsp</title><link href="https://arecrui.github.io/Week-8-Listsp/" rel="alternate" type="text/html" title="Week 8 listsp" /><published>2015-07-16T00:00:00+08:00</published><updated>2015-07-16T00:00:00+08:00</updated><id>https://arecrui.github.io/Week 8 Listsp</id><content type="html" xml:base="https://arecrui.github.io/Week-8-Listsp/">&lt;p&gt;﻿This course introduces the concept of collection/list etc.&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#concept-of-a-collection&quot; id=&quot;markdown-toc-concept-of-a-collection&quot;&gt;1. Concept of a collection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lists-and-definite-loops&quot; id=&quot;markdown-toc-lists-and-definite-loops&quot;&gt;2. Lists and definite loops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#indexing-and-lookup&quot; id=&quot;markdown-toc-indexing-and-lookup&quot;&gt;3. Indexing and lookup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#list-mutability&quot; id=&quot;markdown-toc-list-mutability&quot;&gt;4. List mutability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#functions-len-min-max-sum&quot; id=&quot;markdown-toc-functions-len-min-max-sum&quot;&gt;5. Functions: len, min, max, sum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#slicing-lists&quot; id=&quot;markdown-toc-slicing-lists&quot;&gt;6. Slicing lists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#list-methods-append-remove&quot; id=&quot;markdown-toc-list-methods-append-remove&quot;&gt;7. List methods: append, remove&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sorting-lists&quot; id=&quot;markdown-toc-sorting-lists&quot;&gt;8. Sorting lists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#splitting-strings-into-lists-of-words&quot; id=&quot;markdown-toc-splitting-strings-into-lists-of-words&quot;&gt;9. Splitting strings into lists of words&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-split-to-parse-strings&quot; id=&quot;markdown-toc-using-split-to-parse-strings&quot;&gt;10. Using split to parse strings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;teaser: “Python.jpg”&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;concept-of-a-collection&quot;&gt;1. Concept of a collection&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A collection &lt;strong&gt;&lt;em&gt;allows&lt;/em&gt;&lt;/strong&gt; us to &lt;strong&gt;&lt;em&gt;put many values&lt;/em&gt;&lt;/strong&gt; in a &lt;strong&gt;&lt;em&gt;single “variable”&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A collection is nice because we can carry all many values around in one convenient package.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;friends = [ &#39;Joseph&#39;, &#39;Glenn&#39;, &#39;Sally&#39; ]

carryon = [ &#39;socks&#39;, &#39;shirt&#39;, &#39;perfume&#39; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;What is not a “Collection”
    &lt;ul&gt;
      &lt;li&gt;Most of our variables have one value in them - when we put a new value in the variable - the old value is over written&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ python
Python 2.5.2 (r252:60911, Feb 22 2008, 07:57:53)
[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin
&amp;gt;&amp;gt;&amp;gt; x = 2
&amp;gt;&amp;gt;&amp;gt; x = 4
&amp;gt;&amp;gt;&amp;gt; print x
4
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lists-and-definite-loops&quot;&gt;2. Lists and definite loops&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;List constants are surrounded by square brackets and the elements in the list are separated by commas.&lt;/li&gt;
  &lt;li&gt;A list element can be any Python object - even another list&lt;/li&gt;
  &lt;li&gt;A list can be empty&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print [1, 24, 76]
[1, 24, 76]
&amp;gt;&amp;gt;&amp;gt; print [&#39;red&#39;, &#39;yellow&#39;, &#39;blue&#39;]
[&#39;red&#39;, &#39;yellow&#39;, &#39;blue&#39;]
&amp;gt;&amp;gt;&amp;gt; print [&#39;red&#39;, 24, 98.6]
[&#39;red&#39;, 24, 98.599999999999994]
&amp;gt;&amp;gt;&amp;gt; print [ 1, [5, 6], 7]
[1, [5, 6], 7]
&amp;gt;&amp;gt;&amp;gt; print []
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;indexing-and-lookup&quot;&gt;3. Indexing and lookup&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;friends = [&#39;Joseph&#39;, &#39;Glenn&#39;, &#39;Sally&#39;]
for friend in friends :
    print &#39;Happy New Year:&#39;,  friend
print &#39;Done!&#39;

Happy New Year: Joseph
Happy New Year: Glenn
Happy New Year: SallyDone!
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Just like strings, we can get at any single element in a list using an index specified in square brackets&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; friends = [ &#39;Joseph&#39;, &#39;Glenn&#39;, &#39;Sally&#39; ]
&amp;gt;&amp;gt;&amp;gt; print friends[1]
Glenn
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;list-mutability&quot;&gt;4. List mutability&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Strings are “immutable” - we cannot change the contents of a string - we must make a new string to make any change&lt;/li&gt;
  &lt;li&gt;Lists are “mutable” - we can change an element of a list using the index operator&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fruit = &#39;Banana’
&amp;gt;&amp;gt;&amp;gt; fruit[0] = &#39;b’
Traceback
TypeError: &#39;str&#39; object does not
support item assignment
&amp;gt;&amp;gt;&amp;gt; x = fruit.lower()
&amp;gt;&amp;gt;&amp;gt; print x
banana
&amp;gt;&amp;gt;&amp;gt; lotto = [2, 14, 26, 41, 63]
&amp;gt;&amp;gt;&amp;gt; print lotto[2, 14, 26, 41, 63]
&amp;gt;&amp;gt;&amp;gt; lotto[2] = 28
&amp;gt;&amp;gt;&amp;gt; print lotto
[2, 14, 28, 41, 63]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;functions-len-min-max-sum&quot;&gt;5. Functions: len, min, max, sum&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The len() function takes a list as a parameter and returns the number of elements in the list&lt;/li&gt;
  &lt;li&gt;Actually len() tells us the number of elements of any set or sequence (i.e. such as a string…)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; greet = &#39;Hello Bob&#39;
&amp;gt;&amp;gt;&amp;gt; print len(greet)
9
&amp;gt;&amp;gt;&amp;gt; x = [ 1, 2, &#39;joe&#39;, 99]
&amp;gt;&amp;gt;&amp;gt; print len(x)
4
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;slicing-lists&quot;&gt;6. Slicing lists&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;list-methods-append-remove&quot;&gt;7. List methods: append, remove&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;sorting-lists&quot;&gt;8. Sorting lists&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;splitting-strings-into-lists-of-words&quot;&gt;9. Splitting strings into lists of words&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;using-split-to-parse-strings&quot;&gt;10. Using split to parse strings&lt;/h2&gt;</content><author><name>Liang Zerui</name></author><summary>﻿This course introduces the concept of collection/list etc.</summary></entry><entry><title>Week 7 files</title><link href="https://arecrui.github.io/Week-7-Files/" rel="alternate" type="text/html" title="Week 7 files" /><published>2015-07-15T00:00:00+08:00</published><updated>2015-07-15T00:00:00+08:00</updated><id>https://arecrui.github.io/Week 7 Files</id><content type="html" xml:base="https://arecrui.github.io/Week-7-Files/">&lt;p&gt;﻿How to open &amp;amp; read &amp;amp; oprate a file.&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#using-open&quot; id=&quot;markdown-toc-using-open&quot;&gt;2.1 Using open()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#when-files-are-missing&quot; id=&quot;markdown-toc-when-files-are-missing&quot;&gt;2.3 When files are missing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#file-structure---newline-character&quot; id=&quot;markdown-toc-file-structure---newline-character&quot;&gt;3.File structure - newline character&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reading-a-file-line-by-line-with-a-for-loop&quot; id=&quot;markdown-toc-reading-a-file-line-by-line-with-a-for-loop&quot;&gt;4.Reading a file line-by-line with a for loop&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#counting-lines-in-a-file&quot; id=&quot;markdown-toc-counting-lines-in-a-file&quot;&gt;4.1 Counting Lines in a File&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reading-the-whole-file&quot; id=&quot;markdown-toc-reading-the-whole-file&quot;&gt;4.2 Reading the &lt;em&gt;Whole&lt;/em&gt; File&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#searching-for-lines&quot; id=&quot;markdown-toc-searching-for-lines&quot;&gt;5.Searching for lines&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#using-if-to-select&quot; id=&quot;markdown-toc-using-if-to-select&quot;&gt;5.1 using if to select&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#skipping-with-continue&quot; id=&quot;markdown-toc-skipping-with-continue&quot;&gt;5.2 Skipping with continue&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-in-to-select-lines&quot; id=&quot;markdown-toc-using-in-to-select-lines&quot;&gt;5.3 Using in to select lines&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reading-file-names&quot; id=&quot;markdown-toc-reading-file-names&quot;&gt;6.Reading file names&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dealing-with-bad-files&quot; id=&quot;markdown-toc-dealing-with-bad-files&quot;&gt;7.Dealing with bad files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;teaser: Python.jpg&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;# Week7 Files&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## 1.Secondary storage&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## 2.Opening a file - file handle&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Before we can read the contents of the file we must tell Python which file we are going to work with and what we will be doing with the file&lt;/li&gt;
  &lt;li&gt;This is done with the &lt;strong&gt;&lt;em&gt;open()&lt;/em&gt;&lt;/strong&gt; function&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;open()&lt;/em&gt;&lt;/strong&gt; returns a “&lt;strong&gt;&lt;em&gt;file handle&lt;/em&gt;&lt;/strong&gt;” - a variable used to perform operations on the file&lt;/li&gt;
  &lt;li&gt;Kind of like “File -&amp;gt; Open” in a Word Processor&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;using-open&quot;&gt;2.1 Using open()&lt;/h3&gt;

&lt;p&gt;handle = open(filename, mode)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fhand = open(&#39;mbox.txt&#39;, &#39;r&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;returns a handle use to manipulate the file&lt;/li&gt;
  &lt;li&gt;filename is a string&lt;/li&gt;
  &lt;li&gt;mode is optional and should be ‘r’ if we are planning reading the file and ‘w’ if we are going to write to the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fhand = open(&#39;mbox.txt&#39;)
&amp;gt;&amp;gt;&amp;gt; print fhand
&amp;lt;open file &#39;mbox.txt&#39;, mode &#39;r&#39; at 0x1005088b0&amp;gt;\
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;when-files-are-missing&quot;&gt;2.3 When files are missing&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fhand = open(&#39;stuff.txt&#39;)
Traceback (most recent call last):  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;IOError: [Errno 2] No such file or directory: &#39;stuff.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;file-structure---newline-character&quot;&gt;3.File structure - newline character&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;We use a special character to indicate when a line ends called the “newline”&lt;/li&gt;
  &lt;li&gt;We represent it as \n in strings&lt;/li&gt;
  &lt;li&gt;Newline is still one character - not two&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; stuff = &#39;Hello\nWorld!’
&amp;gt;&amp;gt;&amp;gt; stuff&#39;Hello\nWorld!’
&amp;gt;&amp;gt;&amp;gt; print stuff
HelloWorld!
&amp;gt;&amp;gt;&amp;gt; stuff = &#39;X\nY’
&amp;gt;&amp;gt;&amp;gt; print stuff
X
Y
&amp;gt;&amp;gt;&amp;gt; len(stuff)3
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reading-a-file-line-by-line-with-a-for-loop&quot;&gt;4.Reading a file line-by-line with a for loop&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;A file handle open for read can be treated as a sequence of strings where each line in the file is a string in the sequence&lt;/li&gt;
  &lt;li&gt;We can use the for statement to iterate through a sequence&lt;/li&gt;
  &lt;li&gt;Remember - a sequence is an ordered set&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;xfile = open(&#39;mbox.txt&#39;)
for cheese in xfile:
    print cheese
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;counting-lines-in-a-file&quot;&gt;4.1 Counting Lines in a File&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open a file read-only&lt;/li&gt;
  &lt;li&gt;Use a for loop to read each line&lt;/li&gt;
  &lt;li&gt;Count the lines and print out the number of lines&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;fhand = open(&#39;mbox.txt&#39;)
count = 0
for line in fhand:
     count = count + 1
print &#39;Line Count:&#39;, count

$ python open.py
Line Count: 132045

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;reading-the-whole-file&quot;&gt;4.2 Reading the &lt;em&gt;Whole&lt;/em&gt; File&lt;/h3&gt;

&lt;p&gt;We can read the whole file (newlines and all) into a single string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fhand = open(&#39;mbox-short.txt&#39;)
&amp;gt;&amp;gt;&amp;gt; inp = fhand.read()
&amp;gt;&amp;gt;&amp;gt; print len(inp)94626
&amp;gt;&amp;gt;&amp;gt; print inp[:20]From stephen.marquar
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;searching-for-lines&quot;&gt;5.Searching for lines&lt;/h2&gt;

&lt;h3 id=&quot;using-if-to-select&quot;&gt;5.1 using if to select&lt;/h3&gt;

&lt;p&gt;We can put an if statement in our for loop to only print lines that meet some criteria&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fhand = open(&#39;mbox-short.txt&#39;)
for line in fhand:
      if line.startswith(&#39;From:&#39;) :
            print line
            
            
From: stephen.marquard@uct.ac.za

From: louis@media.berkeley.edu

From: zqian@umich.edu

From: rjlowe@iupui.edu

            
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each line from the file has a newline at the end.&lt;br /&gt;
The print statement adds a newline to each line.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;From: stephen.marquard@uct.ac.za\n
\n
From: louis@media.berkeley.edu\n
\n
From: zqian@umich.edu\n
\n
From: rjlowe@iupui.edu\n
\n
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;We can strip the whitespace from the right hand side of the string using rstrip() from the string library&lt;/li&gt;
  &lt;li&gt;The newline is considered “white space” and is stripped&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;fhand = open(&#39;mbox-short.txt&#39;)
for line in fhand:
      line = line.rstrip()
      if line.startswith(&#39;From:&#39;) :            
      
      
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;skipping-with-continue&quot;&gt;5.2 Skipping with continue&lt;/h3&gt;

&lt;p&gt;We can convienently skip a line by using the continue statement&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fhand = open(&#39;mbox-short.txt&#39;)
for line in fhand:
    line = line.rstrip()
    if not line.startswith(&#39;From:&#39;) :
        continue
    print line
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;using-in-to-select-lines&quot;&gt;5.3 Using in to select lines&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;We can look for a string anywhere in a line as our selection criteria&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;fhand = open(&#39;mbox-short.txt&#39;)
for line in fhand:
    line = line.rstrip()
    if not &#39;@uct.ac.za&#39; in line : 
        continue
    print line
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reading-file-names&quot;&gt;6.Reading file names&lt;/h2&gt;

&lt;p&gt;Prompt for File Name&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fname = raw_input(&#39;Enter the file name:  &#39;)
fhand = open(fname)
count = 0
for line in fhand:
    if line.startswith(&#39;Subject:&#39;) :
        count = count + 1
print &#39;There were&#39;, count, &#39;subject lines in&#39;, fname

Enter the file name:  mbox.txt
There were 1797 subject lines in mbox.txt

Enter the file name: mbox-short.txt
There were 27 subject lines in mbox-short.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dealing-with-bad-files&quot;&gt;7.Dealing with bad files&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;fname = raw_input(&#39;Enter the file name:  &#39;)
try:
    fhand = open(fname)
except:
    print &#39;File cannot be opened:&#39;, fname
    exit()
count = 0
for line in fhand:
    if line.startswith(&#39;Subject:&#39;) :
        count = count + 1
print &#39;There were&#39;, count, &#39;subject lines in&#39;, fname

Enter the file name: mbox.txt
There were 1797 subject lines in mbox.txt

Enter the file name: na na boo boo
File cannot be opened: na na boo boo
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Liang Zerui</name></author><summary>﻿How to open &amp;amp; read &amp;amp; oprate a file.</summary></entry><entry><title>Week 6 strings</title><link href="https://arecrui.github.io/Week-6-Strings/" rel="alternate" type="text/html" title="Week 6 strings" /><published>2015-07-14T00:00:00+08:00</published><updated>2015-07-14T00:00:00+08:00</updated><id>https://arecrui.github.io/Week 6 Strings</id><content type="html" xml:base="https://arecrui.github.io/Week-6-Strings/">&lt;p&gt;﻿Basic string types and how read&amp;amp;convert it. Indexing, looping and slicing a string.&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#readconvert&quot; id=&quot;markdown-toc-readconvert&quot;&gt;2.Read/Convert&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#indexing-strings-&quot; id=&quot;markdown-toc-indexing-strings-&quot;&gt;3.Indexing strings []&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#length-of-strings&quot; id=&quot;markdown-toc-length-of-strings&quot;&gt;3.1 length of strings&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#slicing-strings-24&quot; id=&quot;markdown-toc-slicing-strings-24&quot;&gt;4.Slicing strings [2:4]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#looping-through-strings-with-for-and-while&quot; id=&quot;markdown-toc-looping-through-strings-with-for-and-while&quot;&gt;5.Looping through strings with for and while&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#concatenating-strings-with-&quot; id=&quot;markdown-toc-concatenating-strings-with-&quot;&gt;6.Concatenating strings with +&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#string-operations&quot; id=&quot;markdown-toc-string-operations&quot;&gt;7.String operations&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#string-comparison&quot; id=&quot;markdown-toc-string-comparison&quot;&gt;7.1 String Comparison&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#searching-a-string&quot; id=&quot;markdown-toc-searching-a-string&quot;&gt;7.2 Searching a String&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#making-everything-upper-case&quot; id=&quot;markdown-toc-making-everything-upper-case&quot;&gt;7.3 Making everything UPPER CASE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#search-and-replace&quot; id=&quot;markdown-toc-search-and-replace&quot;&gt;7.4 Search and Replace&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#stripping-whitespace&quot; id=&quot;markdown-toc-stripping-whitespace&quot;&gt;7.5 Stripping Whitespace&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#prefixes&quot; id=&quot;markdown-toc-prefixes&quot;&gt;7.6 Prefixes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#parsing-and-extracting&quot; id=&quot;markdown-toc-parsing-and-extracting&quot;&gt;7.7 Parsing and Extracting&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;teaser: Python.jpg&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;# Week 6 Strings&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## 1.String type&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A string is a &lt;strong&gt;sequence of characters&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A string literal &lt;strong&gt;uses quotes&lt;/strong&gt;  ‘Hello’ or “Hello”&lt;/li&gt;
  &lt;li&gt;For strings, &lt;strong&gt;+ means “concatenate”&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;When a string contains numbers, it is still a string&lt;/li&gt;
  &lt;li&gt;We can convert numbers in a string into a number using int()&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; str1 = &quot;Hello&quot;
&amp;gt;&amp;gt;&amp;gt; str2 = &#39;there&#39;
&amp;gt;&amp;gt;&amp;gt; bob = str1 + str2
&amp;gt;&amp;gt;&amp;gt; print bob
Hellothere
&amp;gt;&amp;gt;&amp;gt; str3 = &#39;123&#39;
&amp;gt;&amp;gt;&amp;gt; str3 = str3 + 1
Traceback (most recent call last):  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;TypeError: cannot concatenate &#39;str&#39; and &#39;int&#39; objects
&amp;gt;&amp;gt;&amp;gt; x = int(str3) + 1
&amp;gt;&amp;gt;&amp;gt; print x
124
&amp;gt;&amp;gt;&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;readconvert&quot;&gt;2.Read/Convert&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We prefer to read data in using strings and then parse and convert the data as we need&lt;/li&gt;
  &lt;li&gt;This gives us more control over error situations and/or bad user input&lt;/li&gt;
  &lt;li&gt;Raw input numbers must be converted from strings&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; name = raw_input(&#39;Enter:&#39;)
Enter:Chuck
&amp;gt;&amp;gt;&amp;gt; print name
Chuck
&amp;gt;&amp;gt;&amp;gt; apple = raw_input(&#39;Enter:&#39;)
Enter:100
&amp;gt;&amp;gt;&amp;gt; x = apple – 10
Traceback (most recent call last):  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;TypeError: unsupported operand type(s) for -: &#39;str&#39; and &#39;int&#39;
&amp;gt;&amp;gt;&amp;gt; x = int(apple) – 10
&amp;gt;&amp;gt;&amp;gt; print x
90

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;indexing-strings-&quot;&gt;3.Indexing strings []&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We can get at any &lt;strong&gt;&lt;em&gt;single character&lt;/em&gt;&lt;/strong&gt; in a string using an index specified in square brackets&lt;/li&gt;
  &lt;li&gt;The index value must be an &lt;strong&gt;&lt;em&gt;integer&lt;/em&gt;&lt;/strong&gt; and starts at &lt;strong&gt;&lt;em&gt;zero&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The index value can be an expression that is computed&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fruit = &#39;banana&#39;
&amp;gt;&amp;gt;&amp;gt; letter = fruit[1]
&amp;gt;&amp;gt;&amp;gt; print letter
a
&amp;gt;&amp;gt;&amp;gt; n = 3
&amp;gt;&amp;gt;&amp;gt; w = fruit[n - 1]
&amp;gt;&amp;gt;&amp;gt; print w
n

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;You will get a python error if you attempt to index beyond the end of a string.&lt;/li&gt;
  &lt;li&gt;So be careful when constructing index values and slices&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; zot = &#39;abc&#39;
&amp;gt;&amp;gt;&amp;gt; print zot[5]
Traceback (most recent call last):  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;IndexError: string index out of range
&amp;gt;&amp;gt;&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;length-of-strings&quot;&gt;3.1 length of strings&lt;/h3&gt;

&lt;p&gt;There is a built-in function len that gives us the length of a string&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fruit = &#39;banana&#39;
&amp;gt;&amp;gt;&amp;gt; print len(fruit)
6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fruit = &#39;banana&#39;
&amp;gt;&amp;gt;&amp;gt; x = len(fruit)
&amp;gt;&amp;gt;&amp;gt; print x
6

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A function is some &lt;strong&gt;stored code&lt;/strong&gt; that we use. A function takes some &lt;strong&gt;input&lt;/strong&gt; and produces an &lt;strong&gt;output&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;slicing-strings-24&quot;&gt;4.Slicing strings [2:4]&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We can also look at any continuous section of a string using a colon operator&lt;/li&gt;
  &lt;li&gt;The second number is one beyond the end of the slice - “up to but not including”&lt;/li&gt;
  &lt;li&gt;If the second number is beyond the end of the string, it stops at the end&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; s = &#39;Monty Python&#39;
&amp;gt;&amp;gt;&amp;gt; print s[0:4]
Mont
&amp;gt;&amp;gt;&amp;gt; print s[6:7]
P
&amp;gt;&amp;gt;&amp;gt; print s[6:20]
Python
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;If we leave off the first number or the last number of the slice, it is assumed to be the beginning or end of the string respectively&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; s = &#39;Monty Python&#39;
&amp;gt;&amp;gt;&amp;gt; print s[:2]
Mo
&amp;gt;&amp;gt;&amp;gt; print s[8:]
Thon
&amp;gt;&amp;gt;&amp;gt; print s[:]
Monty Python
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;looping-through-strings-with-for-and-while&quot;&gt;5.Looping through strings with for and while&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Using a while statement and an iteration variable, and the len function, we can construct a loop to look at each of the letters in a string individually&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;fruit = &#39;banana&#39;
index = 0
while index &amp;lt; len(fruit) : 
   letter = fruit[index]
    print index, letter
    index = index + 1

0 b
1 a
2 n
3 a
4 n
5 a

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;A definite loop using a for statement is much more elegant&lt;br /&gt;
The iteration variable is completely taken care of by the for loop&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;fruit = &#39;banana&#39;
for letter in fruit : 
   print letter

b
a
n
a
n
a

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;This is a simple loop that loops through each letter in a string and counts the number of times the loop encounters the ‘a’ character.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;word = &#39;banana&#39;
count = 0
for letter in word :
    if letter == &#39;a&#39; : 
       count = count + 1
print count

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;iteration variable&lt;/strong&gt; “iterates” through the &lt;strong&gt;sequence&lt;/strong&gt; (ordered set)&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;block (body)&lt;/strong&gt; of code is executed once for each value &lt;strong&gt;in&lt;/strong&gt; the &lt;strong&gt;sequence&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;iteration variable&lt;/strong&gt; moves through all of the values &lt;strong&gt;in&lt;/strong&gt; the &lt;strong&gt;sequence&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;concatenating-strings-with-&quot;&gt;6.Concatenating strings with +&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;When the + operator is applied to strings, it means “concatenation”&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = &#39;Hello&#39;
&amp;gt;&amp;gt;&amp;gt; b = a + &#39;There&#39;
&amp;gt;&amp;gt;&amp;gt; print b
HelloThere
&amp;gt;&amp;gt;&amp;gt; c = a + &#39;  &#39; + &#39;There&#39;
&amp;gt;&amp;gt;&amp;gt; print c
Hello There
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;string-operations&quot;&gt;7.String operations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Python has a number of &lt;strong&gt;&lt;em&gt;string functions&lt;/em&gt;&lt;/strong&gt; which are in the string library&lt;/li&gt;
  &lt;li&gt;These functions are &lt;strong&gt;&lt;em&gt;already built&lt;/em&gt;&lt;/strong&gt; into every string - we invoke them by appending the function to the string variable&lt;/li&gt;
  &lt;li&gt;These functions &lt;strong&gt;&lt;em&gt;do not modify&lt;/em&gt;&lt;/strong&gt; the original string, instead they &lt;strong&gt;&lt;em&gt;return a new string&lt;/em&gt;&lt;/strong&gt; that has been altered&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; stuff = &#39;Hello world’
&amp;gt;&amp;gt;&amp;gt; type(stuff)&amp;lt;type &#39;str&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; dir(stuff)
[&#39;capitalize&#39;, &#39;center&#39;, &#39;count&#39;, &#39;decode&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isdigit&#39;, &#39;islower&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;]

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;string-comparison&quot;&gt;7.1 String Comparison&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if word == &#39;banana&#39;:
    print  &#39;All right, bananas.&#39;

if word &amp;lt; &#39;banana&#39;:
    print &#39;Your word,&#39; + word + &#39;, comes before banana.’
elif word &amp;gt; &#39;banana&#39;:
    print &#39;Your word,&#39; + word + &#39;, comes after banana.’
else:
    print &#39;All right, bananas.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;searching-a-string&quot;&gt;7.2 Searching a String&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;We use the find() function to search for a substring within another string&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;find()&lt;/em&gt;&lt;/strong&gt; finds the first occurance of the substring&lt;br /&gt;
If the substring is not found, find() returns -1&lt;br /&gt;
Remember that string position starts at zero&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fruit = &#39;banana&#39;
&amp;gt;&amp;gt;&amp;gt; pos = fruit.find(&#39;na&#39;)
&amp;gt;&amp;gt;&amp;gt; print pos
2
&amp;gt;&amp;gt;&amp;gt; aa = fruit.find(&#39;z&#39;)
&amp;gt;&amp;gt;&amp;gt; print aa
-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;making-everything-upper-case&quot;&gt;7.3 Making everything UPPER CASE&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;You can make a copy of a string in lower case or upper case&lt;/li&gt;
  &lt;li&gt;Often when we are searching for a string using find()- we first convert the string to lower case so we can search a string regardless of case&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; greet = &#39;Hello Bob&#39;
&amp;gt;&amp;gt;&amp;gt; nnn = greet.upper()
&amp;gt;&amp;gt;&amp;gt; print nnn
HELLO BOB
&amp;gt;&amp;gt;&amp;gt; www = greet.lower()
&amp;gt;&amp;gt;&amp;gt; print www
hello bob
&amp;gt;&amp;gt;&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;search-and-replace&quot;&gt;7.4 Search and Replace&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;&lt;em&gt;replace()&lt;/em&gt;&lt;/strong&gt; function is like a “search and replace” operation in a word processor&lt;/li&gt;
  &lt;li&gt;It replaces &lt;em&gt;all occurrences&lt;/em&gt; of the search string with the &lt;strong&gt;&lt;em&gt;replacement string&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; greet = &#39;Hello Bob&#39;
&amp;gt;&amp;gt;&amp;gt; nstr = greet.replace(&#39;Bob&#39;,&#39;Jane&#39;)
&amp;gt;&amp;gt;&amp;gt; print nstr
Hello Jane
&amp;gt;&amp;gt;&amp;gt; nstr = greet.replace(&#39;o&#39;,&#39;X&#39;)
&amp;gt;&amp;gt;&amp;gt; print nstrHellX BXb
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;stripping-whitespace&quot;&gt;7.5 Stripping Whitespace&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Sometimes we want to take a string and remove whitespace at the beginning and/or end&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;lstrip()&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;rstrip()&lt;/em&gt;&lt;/strong&gt; to the left and right only&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;strip()&lt;/em&gt;&lt;/strong&gt; Removes both begin and ending whitespace&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; greet = &#39;   Hello Bob  &#39;
&amp;gt;&amp;gt;&amp;gt; greet.lstrip()
&#39;Hello Bob  &#39;
&amp;gt;&amp;gt;&amp;gt; greet.rstrip()
&#39;   Hello Bob&#39;
&amp;gt;&amp;gt;&amp;gt; greet.strip()
&#39;Hello Bob&#39;
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;prefixes&quot;&gt;7.6 Prefixes&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; line = &#39;Please have a nice day’
&amp;gt;&amp;gt;&amp;gt; line.startswith(&#39;Please&#39;)
True
&amp;gt;&amp;gt;&amp;gt; line.startswith(&#39;p&#39;)
False
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;parsing-and-extracting&quot;&gt;7.7 Parsing and Extracting&lt;/h3&gt;

&lt;p&gt;From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; data = &#39;From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008’
&amp;gt;&amp;gt;&amp;gt; atpos = data.find(&#39;@&#39;)
&amp;gt;&amp;gt;&amp;gt; print atpos
21
&amp;gt;&amp;gt;&amp;gt; sppos = data.find(&#39; &#39;,atpos)
&amp;gt;&amp;gt;&amp;gt; print sppos
31
&amp;gt;&amp;gt;&amp;gt; host = data[atpos+1 : sppos]
&amp;gt;&amp;gt;&amp;gt; print host
uct.ac.za

&lt;/code&gt;&lt;/pre&gt;</content><author><name>Liang Zerui</name></author><summary>﻿Basic string types and how read&amp;amp;convert it. Indexing, looping and slicing a string.</summary></entry><entry><title>Week 5 loops and iterations</title><link href="https://arecrui.github.io/Week-5-Loops-and-iterations/" rel="alternate" type="text/html" title="Week 5 loops and iterations" /><published>2015-07-13T00:00:00+08:00</published><updated>2015-07-13T00:00:00+08:00</updated><id>https://arecrui.github.io/Week 5 Loops and iterations</id><content type="html" xml:base="https://arecrui.github.io/Week-5-Loops-and-iterations/">&lt;p&gt;﻿Introduces loops and iterations, example of infinite loop and using break&amp;amp;continue.&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#infinite-loops&quot; id=&quot;markdown-toc-infinite-loops&quot;&gt;2. Infinite loops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-break&quot; id=&quot;markdown-toc-using-break&quot;&gt;3. Using break&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-continue&quot; id=&quot;markdown-toc-using-continue&quot;&gt;4. Using continue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#for-loops-definite&quot; id=&quot;markdown-toc-for-loops-definite&quot;&gt;5. For loops (definite)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#iteration-variables&quot; id=&quot;markdown-toc-iteration-variables&quot;&gt;6. Iteration variables&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#counting-in-a-loop&quot; id=&quot;markdown-toc-counting-in-a-loop&quot;&gt;6.1 Counting in a Loop&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#summing-in-a-loop&quot; id=&quot;markdown-toc-summing-in-a-loop&quot;&gt;6.2 Summing in a Loop&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#finding-the-average-in-a-loop&quot; id=&quot;markdown-toc-finding-the-average-in-a-loop&quot;&gt;6.3 Finding the Average in a Loop&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#filtering-in-a-loop&quot; id=&quot;markdown-toc-filtering-in-a-loop&quot;&gt;6.4 Filtering in a Loop&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#search-using-a-boolean-variable&quot; id=&quot;markdown-toc-search-using-a-boolean-variable&quot;&gt;6.5 Search Using a Boolean Variable&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#largest-or-smallest&quot; id=&quot;markdown-toc-largest-or-smallest&quot;&gt;7. Largest or smallest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;teaser: Python.jpg&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;# Week 5 Loops and iterations&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## 1. While loops (indefinite)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loops&lt;/strong&gt; (repeated steps) have &lt;strong&gt;iteration variables&lt;/strong&gt; that change each time through a loop.  Often these iteration&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While loops are called “indefinite loops” because they keep going until   a logical condition becomes False&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;n = 5
while n &amp;gt; 0 :
    print n
    n = n – 1
print &#39;Blastoff!&#39;
print n

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;infinite-loops&quot;&gt;2. Infinite loops&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;n = 5
while n &amp;gt; 0 :
    print &#39;Lather’
    print &#39;Rinse&#39;
print &#39;Dry off!&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;using-break&quot;&gt;3. Using break&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;break&lt;/strong&gt; statement &lt;strong&gt;ends&lt;/strong&gt; the &lt;strong&gt;current loop&lt;/strong&gt; and jumps to the statement immediately following the loop&lt;/li&gt;
  &lt;li&gt;It is like a loop test that can happen anywhere in the body of the loop&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;while True:
    line = raw_input(&#39;&amp;gt; &#39;)
    if line == &#39;done&#39; :
        break
    print line
print &#39;Done!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; hello there
hello there
&amp;gt; finished
finished
&amp;gt; done
Done!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;using-continue&quot;&gt;4. Using continue&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;continue&lt;/strong&gt; statement ends the current iteration and jumps to the &lt;strong&gt;top of the loop&lt;/strong&gt; and starts the next iteration&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while True:
    line = raw_input(&#39;&amp;gt; &#39;)
    if line[0] == &#39;#&#39; :
        continue
    if line == &#39;done&#39; 
:        break
    print line
print &#39;Done!&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; hello there
hello there
&amp;gt; # don&#39;t print this
&amp;gt; print this!
print this!
&amp;gt; done
Done!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;for-loops-definite&quot;&gt;5. For loops (definite)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Quite often we have a &lt;strong&gt;list&lt;/strong&gt; of items of the &lt;strong&gt;lines in a file&lt;/strong&gt; effectively a &lt;strong&gt;finite set&lt;/strong&gt; of things&lt;/li&gt;
  &lt;li&gt;We can write a loop to run the loop once for each of the items in a set using the Python &lt;strong&gt;for&lt;/strong&gt; construct&lt;/li&gt;
  &lt;li&gt;These loops are called “&lt;strong&gt;definite loops&lt;/strong&gt;” because they execute an exact number of times&lt;/li&gt;
  &lt;li&gt;We say that “&lt;strong&gt;definite loops iterate through the members of a set&lt;/strong&gt;”&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;friends = [&#39;Joseph&#39;, &#39;Glenn&#39;, &#39;Sally&#39;]
for friend in friends : 
   print &#39;Happy New Year:&#39;,  friend
print &#39;Done!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Happy New Year: Joseph
Happy New Year: Glenn
Happy New Year: Sally
Done!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;iteration-variables&quot;&gt;6. Iteration variables&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The iteration variable “iterates” though the sequence (ordered set)&lt;/li&gt;
  &lt;li&gt;The block (body) of code is executed once for each value in the sequence&lt;/li&gt;
  &lt;li&gt;The iteration variable moves through all of the values in the sequence&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;counting-in-a-loop&quot;&gt;6.1 Counting in a Loop&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;zork = 0
print &#39;Before&#39;, zork
for thing in [9, 41, 12, 3, 74, 15] :
    zork = zork + 1
    print zork, thing
print &#39;After&#39;, zork

#To count how many times we execute a loop we introduce a counter variable that starts at 0 and we add one to it each time through the loop.

$ python countloop.py
Before 0
1 9
2 41
3 12
4 3
5 74
6 15
After 6

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;summing-in-a-loop&quot;&gt;6.2 Summing in a Loop&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;zork = 0
print &#39;Before&#39;, zork
for thing in [9, 41, 12, 3, 74, 15] :
    zork = zork + thing
    print zork, thing
print &#39;After&#39;, zork

#To add up a value we encounter in a loop,  we introduce a sum variable that starts at 0 and we add the value to the sum each time through the loop.

$ python countloop.py 
Before 0
9 9
50 41
62 12
65 3
139 74
154 15
After 154
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;finding-the-average-in-a-loop&quot;&gt;6.3 Finding the Average in a Loop&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;count = 0
sum = 0
print &#39;Before&#39;, count, sum
for value in [9, 41, 12, 3, 74, 15] :
    count = count + 1
    sum = sum + value
    print count, sum, value
print &#39;After&#39;, count, sum, sum / count

#An average just combines the counting and sum patterns and divides when the loop is done.

$ python averageloop.py 
Before 0 0
1 9 9
2 50 41
3 62 12
4 65 3
5 139 74
6 154 15
After 6 154 25
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;filtering-in-a-loop&quot;&gt;6.4 Filtering in a Loop&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;print &#39;Before&#39;
for value in [9, 41, 12, 3, 74, 15] :
    if value &amp;gt; 20:
 	    print &#39;Large number&#39;,value
print &#39;After&#39;

# We use an if statement in the loop to catch / filter the values we are looking for.

$ python search1.py 
Before
Large number 41
Large number 74
After
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;search-using-a-boolean-variable&quot;&gt;6.5 Search Using a Boolean Variable&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;found = False
print &#39;Before&#39;, found
for value in [9, 41, 12, 3, 74, 15] : 
   if value == 3 :
         found = True
    print found, value
print &#39;After&#39;, found

#If we just want to search and know if a value was found - we use a variable that starts at False and is set to True as soon as we find what we are looking for.

$ python search1.py 
Before False
False 9
False 41
False 12
True 3
True 74
True 15
After True

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;largest-or-smallest&quot;&gt;7. Largest or smallest&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;smallest = None #特殊类型变量
print &#39;Before&#39;
for value in [9, 41, 12, 3, 74, 15] :
    if smallest is None : #IS是逻辑运算符，少用 主要是为了检查是否是 none 或 false
        smallest = value
    elif value &amp;lt; smallest : 
        smallest = value
    print smallest, value
print &#39;After&#39;, smallest

# We still have a variable that is the smallest so far.  The first time through the loop smallest is None so we take the first value to be the smallest.

    $ python smallest.py 
    Before
    9 9
    9 41
    9 12
    3 3
    3 74
    3 15
    After 3

&lt;/code&gt;&lt;/pre&gt;</content><author><name>Liang Zerui</name></author><summary>﻿Introduces loops and iterations, example of infinite loop and using break&amp;amp;continue.</summary></entry><entry><title>Week 4 functions</title><link href="https://arecrui.github.io/Week-4-Functions/" rel="alternate" type="text/html" title="Week 4 functions" /><published>2015-07-12T00:00:00+08:00</published><updated>2015-07-12T00:00:00+08:00</updated><id>https://arecrui.github.io/Week 4 Functions</id><content type="html" xml:base="https://arecrui.github.io/Week-4-Functions/">&lt;p&gt;﻿Introduces functions prams and arguments. How to define and use founctions.&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#week-4-functions&quot; id=&quot;markdown-toc-week-4-functions&quot;&gt;Week 4 Functions&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#python-functions&quot; id=&quot;markdown-toc-python-functions&quot;&gt;2.Python Functions&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#built-in-functions-that-are-provided&quot; id=&quot;markdown-toc-built-in-functions-that-are-provided&quot;&gt;2.1. &lt;strong&gt;Built in functions&lt;/strong&gt; that are provided&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#defined-functions&quot; id=&quot;markdown-toc-defined-functions&quot;&gt;2.2. &lt;strong&gt;Defined functions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#arguments&quot; id=&quot;markdown-toc-arguments&quot;&gt;3.Arguments&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#parameters&quot; id=&quot;markdown-toc-parameters&quot;&gt;3.1 Parameters&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#return-values&quot; id=&quot;markdown-toc-return-values&quot;&gt;3.2 Return Values&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;teaser: Python.jpg&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;week-4-functions&quot;&gt;Week 4 Functions&lt;/h1&gt;

&lt;hr /&gt;
&lt;p&gt;### 1.Stored (and reused) Steps&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def hello(): #定义函数(store)
    print &#39;Hello&#39;
    print &#39;Fun&#39;
    
hello() #调用函数(reuse)
print &#39;Zip&#39;
hello() #调用函数(reuse)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;

  &lt;p&gt;&lt;strong&gt;Type Conversion&lt;/strong&gt; &lt;br /&gt;
Built in functions &lt;strong&gt;int()&lt;/strong&gt; and &lt;strong&gt;float()&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-functions&quot;&gt;2.Python Functions&lt;/h3&gt;

&lt;h4 id=&quot;built-in-functions-that-are-provided&quot;&gt;2.1. &lt;strong&gt;Built in functions&lt;/strong&gt; that are provided&lt;/h4&gt;

&lt;p&gt;-input: raw_input()&lt;br /&gt;
-type conversions: type()&lt;br /&gt;
-string conversions: str() int()&lt;/p&gt;

&lt;h4 id=&quot;defined-functions&quot;&gt;2.2. &lt;strong&gt;Defined functions&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;-&lt;strong&gt;arguments&lt;/strong&gt; as input&lt;br /&gt;
-&lt;strong&gt;def&lt;/strong&gt; to define&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;big= max(&#39;Hello world&#39;) #定义函数 不会执行
print big #调用函数 执行
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Names&lt;/strong&gt; of built in function == &lt;strong&gt;New reserved words&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;arguments&quot;&gt;3.Arguments&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;is a value pass into the function&lt;/li&gt;
    &lt;li&gt;need to be in the ()&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;parameters&quot;&gt;3.1 Parameters&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;A parameter is a variable which we use in the functions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;definition that is a “handle” that allows the code in the function to access the arguments for a particular function invocation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def greet(lang):
            if lang == &#39;es&#39;:
               print &#39;Hola’
            elif lang == &#39;fr&#39;:
               print &#39;Bonjour’
            else:
               print &#39;Hello’
    greet(&#39;en&#39;)Hello
    greet(&#39;es&#39;)Hola
    greet(&#39;fr&#39;)Bonjour
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;return-values&quot;&gt;3.2 Return Values&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Often a function will take its arguments, do some computation and &lt;strong&gt;return&lt;/strong&gt; a value to be used as the value of the function call in the &lt;strong&gt;calling expression&lt;/strong&gt;.  The return keyword is used for this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def greet(lang):
...         if lang == &#39;es&#39;:
...            return &#39;Hola’
...         elif lang == &#39;fr&#39;:
...            return &#39;Bonjour’
...         else:
...            return &#39;Hello’
... &amp;gt;&amp;gt;&amp;gt; print greet(&#39;en&#39;),&#39;Glenn’
Hello Glenn
&amp;gt;&amp;gt;&amp;gt; print greet(&#39;es&#39;),&#39;Sally’
Hola Sally
&amp;gt;&amp;gt;&amp;gt; print greet(&#39;fr&#39;),&#39;Michael’
Bonjour Michael
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Liang Zerui</name></author><summary>﻿Introduces functions prams and arguments. How to define and use founctions.</summary></entry><entry><title>Week 3 conditional execution</title><link href="https://arecrui.github.io/Week-3-Conditional-execution/" rel="alternate" type="text/html" title="Week 3 conditional execution" /><published>2015-07-11T00:00:00+08:00</published><updated>2015-07-11T00:00:00+08:00</updated><id>https://arecrui.github.io/Week 3 Conditional execution</id><content type="html" xml:base="https://arecrui.github.io/Week-3-Conditional-execution/">&lt;p&gt;﻿The concept of conditional execution and basic examples.&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison-operators&quot; id=&quot;markdown-toc-comparison-operators&quot;&gt;2. Comparison Operators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#logical-operators-and-or-not&quot; id=&quot;markdown-toc-logical-operators-and-or-not&quot;&gt;3. Logical operators: and or not&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#indentation&quot; id=&quot;markdown-toc-indentation&quot;&gt;4. Indentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#one-way-decisions&quot; id=&quot;markdown-toc-one-way-decisions&quot;&gt;5. One Way Decisions&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;5.1 流程图如下&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;5.2 代码如下：&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;5.3 显示结果如下：&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#two-way-decisions--if---and-else-&quot; id=&quot;markdown-toc-two-way-decisions--if---and-else-&quot;&gt;6. Two way Decisions  if :  and else :&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;6.1 流程图如下：&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;6.2 代码如下：&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nested-decisions&quot; id=&quot;markdown-toc-nested-decisions&quot;&gt;7. Nested Decisions(嵌套)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;7.1 流程图如下：&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;7.2 代码如下：&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#multiway-decisions-using-elif&quot; id=&quot;markdown-toc-multiway-decisions-using-elif&quot;&gt;8. Multiway decisions using elif&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;8.1 流程图如下:&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;8.2代码如下：&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#multi-way-puzzles-which-will-never-print&quot; id=&quot;markdown-toc-multi-way-puzzles-which-will-never-print&quot;&gt;8.3 Multi-way Puzzles-Which will never print?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#try--except-to-compensate-for-errors&quot; id=&quot;markdown-toc-try--except-to-compensate-for-errors&quot;&gt;9. Try / Except to compensate for errors&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;9.1 示例代码如下：&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exercise&quot; id=&quot;markdown-toc-exercise&quot;&gt;10. Exercise&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#exercise-31&quot; id=&quot;markdown-toc-exercise-31&quot;&gt;10.1 Exercise 3.1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#exercise-33&quot; id=&quot;markdown-toc-exercise-33&quot;&gt;10.2 Exercise 3.3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;teaser: Python.jpg&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;# Week 3 Conditional execution&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;### 1. Conditional Steps&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;st=&amp;gt;start: x=5
e=&amp;gt;end: print &#39;finis&#39;
cond1=&amp;gt;condition: x&amp;lt;10?
op1=&amp;gt;operation: print &#39;Smaller&#39;
cond2=&amp;gt;condition: x&amp;gt;20?
op2=&amp;gt;operation: print &#39;Bigger&#39;
st-&amp;gt;cond1-&amp;gt;cond2
cond1(yes)-&amp;gt;op1-&amp;gt;e
cond1(no)-&amp;gt;cond2
cond2(yes)-&amp;gt;op2-&amp;gt;e
cond2(no)-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;comparison-operators&quot;&gt;2. Comparison Operators&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;     less than
&amp;lt;=	  less than or equal
==    equal to
&amp;gt;=    greater than or equal
&amp;gt;     greater than 
!=    not equal
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Boolean expressions&lt;/strong&gt; ask a question and produce a Yes or No result which we use to control program flow&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Boolean expressions&lt;/strong&gt; using &lt;strong&gt;&lt;em&gt;comparison operators&lt;/em&gt;&lt;/strong&gt;  evaluate to - &lt;strong&gt;True / False&lt;/strong&gt; - &lt;strong&gt;Yes / No&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Comparison operators&lt;/strong&gt; look at variables but &lt;strong&gt;do not&lt;/strong&gt; change the variables&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;logical-operators-and-or-not&quot;&gt;3. Logical operators: and or not&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;indentation&quot;&gt;4. Indentation&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Indentation&lt;/code&gt; &lt;strong&gt;DO&lt;/strong&gt; &lt;code&gt;matter in python.&lt;/code&gt;&lt;br /&gt;
1. &lt;strong&gt;Increase indent&lt;/strong&gt; after an if statement or for statement (after : )&lt;br /&gt;
2. &lt;strong&gt;Maintain indent&lt;/strong&gt; to indicate the scope of the block (which lines are affected by the if/for)&lt;br /&gt;
3. &lt;strong&gt;Reduce indent&lt;/strong&gt; to back to the level of the if statement or for statement to indicate the end of the block&lt;br /&gt;
4. &lt;strong&gt;&lt;em&gt;Blank lines are ignored&lt;/em&gt;&lt;/strong&gt; - they do not affect indentation&lt;br /&gt;
5. &lt;strong&gt;Comments&lt;/strong&gt; on a line by themselves &lt;strong&gt;are ignored&lt;/strong&gt;&lt;br /&gt;
&amp;gt;&lt;strong&gt;Warning: Turn Off Tabs&lt;/strong&gt; &lt;br /&gt;
Or change the editor setting&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;one-way-decisions&quot;&gt;5. One Way Decisions&lt;/h3&gt;

&lt;h4 id=&quot;section&quot;&gt;5.1 流程图如下&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;st=&amp;gt;start: x=5
e=&amp;gt;end: print &#39;Afterwards 5&#39;
cond1=&amp;gt;condition: x==5?
op1=&amp;gt;operation: print &#39;is 5&#39;
op2=&amp;gt;operation: print &#39;Still 5&#39;
op3=&amp;gt;operation: print &#39;Third 5&#39;
op4=&amp;gt;operation: print &#39;Before 5&#39;
st-&amp;gt;op4-&amp;gt;cond1-&amp;gt;e
cond1(yes)-&amp;gt;op1-&amp;gt;op2-&amp;gt;op3-&amp;gt;e
cond1(no)-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-1&quot;&gt;5.2 代码如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    x = 5
	print &#39;Before 5’
	if  x == 5 :
	    print &#39;Is 5’
	    print &#39;Is Still 5’
	    print &#39;Third 5’
	print &#39;Afterwards 5’
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;5.3 显示结果如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    Before 5
	Is 5
	Is Still 5
	Third 5
	Afterwards 5
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;two-way-decisions--if---and-else-&quot;&gt;6. Two way Decisions  if :  and else :&lt;/h3&gt;

&lt;h4 id=&quot;section-3&quot;&gt;6.1 流程图如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;st=&amp;gt;start: x=4
e=&amp;gt;end: print &#39;All Done&#39;
op1=&amp;gt;operation: print &#39;Smaller&#39;
op2=&amp;gt;operation: print &#39;Bigger&#39;
cond1=&amp;gt;condition: x&amp;gt;2
st-&amp;gt;cond1
cond1(yes)-&amp;gt;op2-&amp;gt;e
cond1(no)-&amp;gt;op1-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-4&quot;&gt;6.2 代码如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    x=4
    if x&amp;gt;2:
	    print &#39;Bigger&#39;
	else:
		print &#39;Smaller&#39;
	print &#39;All Done&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;nested-decisions&quot;&gt;7. Nested Decisions(嵌套)&lt;/h3&gt;

&lt;h4 id=&quot;section-5&quot;&gt;7.1 流程图如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;st=&amp;gt;start: start
e=&amp;gt;end: end
cond1=&amp;gt;condition: x&amp;gt;1
cond2=&amp;gt;condition: x&amp;lt;100
op1=&amp;gt;operation: print &#39;More than one&#39;
op2=&amp;gt;operation: print &#39;Less than 100&#39;
op2=&amp;gt;operation: print &#39;All Done&#39;
st-&amp;gt;cond1-&amp;gt;e
cond1(no)-&amp;gt;e
cond1(yes)-&amp;gt;op1-&amp;gt;cond2
cond2(yes)-&amp;gt;op2-&amp;gt;e
cond2(no)-&amp;gt;e

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-6&quot;&gt;7.2 代码如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    x = 42

	if x &amp;gt; 1 :
	    print &#39;More than one&#39;
	    if x &amp;lt; 100 : 
	        print &#39;Less than 100&#39;

	print &#39;All done&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;multiway-decisions-using-elif&quot;&gt;8. Multiway decisions using elif&lt;/h3&gt;

&lt;h4 id=&quot;section-7&quot;&gt;8.1 流程图如下:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;st=&amp;gt;start: start
cond1=&amp;gt;condition: x&amp;lt;2
cond2=&amp;gt;condition: x&amp;lt;10
cond3=&amp;gt;condition: x&amp;lt;20
cond4=&amp;gt;condition: x&amp;lt;40
cond5=&amp;gt;condition: x&amp;lt;100
op1=&amp;gt;operation: print &#39;Small&#39;
op2=&amp;gt;operation: print &#39;Medium&#39;
op3=&amp;gt;operation: print &#39;Big&#39;
op4=&amp;gt;operation: print &#39;Large&#39;
op5=&amp;gt;operation: print &#39;Huge&#39;
op6=&amp;gt;operation: print &#39;Ginormous&#39;
st-&amp;gt;cond1
cond1(yes)-&amp;gt;op1
cond2(yes)-&amp;gt;op2
cond3(yes)-&amp;gt;op3
cond4(yes)-&amp;gt;op4
cond5(yes)-&amp;gt;op5
cond1(no)-&amp;gt;cond2
cond2(no)-&amp;gt;cond3
cond3(no)-&amp;gt;cond4
cond4(no)-&amp;gt;cond5
cond5(no)-&amp;gt;op6-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-8&quot;&gt;8.2代码如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    if x &amp;lt; 2 :
	    print &#39;Small&#39;
	elif x &amp;lt; 10 :
	    print &#39;Medium&#39;
	elif x &amp;lt; 20 : 
	    print &#39;Big&#39;
	elif x&amp;lt; 40 : 
	    print &#39;Large&#39;
	elif x &amp;lt; 100:
	    print &#39;Huge&#39;
	else :
    print &#39;Ginormous&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;multi-way-puzzles-which-will-never-print&quot;&gt;8.3 Multi-way Puzzles-Which will never print?&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if x &amp;lt; 2 :
    print &#39;Below 2&#39;
elif x &amp;gt;= 2 : 
    print &#39;Two or more&#39;
**else : #此行之后不执行
    print &#39;Something else&#39;** 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if x &amp;lt; 2 :
    print &#39;Below 2&#39;
elif x &amp;lt; 20 :
    print &#39;Below 20&#39;
**elif x &amp;lt; 10 :  #以下两行不执行
    print &#39;Below 10&#39;**
else :
    print &#39;Something else&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;try--except-to-compensate-for-errors&quot;&gt;9. Try / Except to compensate for errors&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;You surround a dangerous section of code with &lt;strong&gt;try and except&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If the code in the try &lt;strong&gt;works&lt;/strong&gt; - the except is skipped&lt;/li&gt;
  &lt;li&gt;If the code in the try &lt;strong&gt;fails&lt;/strong&gt; - it jumps to the except section&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-9&quot;&gt;9.1 示例代码如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;rawstr = raw_input(&#39;Enter a number:&#39;)
try: 
    ival = int(rawstr)
except: 
    ival = -1

if ival &amp;gt; 0 :  
    print &#39;Nice work&#39;else:  
    print &#39;Not a number&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;exercise&quot;&gt;10. Exercise&lt;/h3&gt;

&lt;h4 id=&quot;exercise-31&quot;&gt;10.1 Exercise 3.1&lt;/h4&gt;

&lt;p&gt;Rewrite your pay computation to give the employee 1.5 times the hourly rate for hours worked above40 hours.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;hours=raw_input(&quot;How many hours do you work per week?\n&quot;)
try: 
    Hours = float(hours)
    rate=raw_input(&quot;How much do you get paid per hour?\n&quot;)
    try: 
        Rate = float(rate)
        if Hours &amp;lt; 40 :
            TotalPay=float(Hours)* float(Rate)
            print &quot;So, you get paid &quot; + str(TotalPay) + &quot; per week?&quot; 
        else:
            TotalPay=(float(Hours)-40)*1.5*float(Rate)+40*float(Rate)
            print &quot;So, you get paid &quot; + str(TotalPay) + &quot; dollars per week?&quot;
    except: 
        Rate = -1
    if Rate &amp;lt;0 :
        print &quot;Please enter numeric input!&quot;
except: 
    Hours = -1
if Hours &amp;lt;0 :
    print &quot;Please enter numeric input!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;exercise-33&quot;&gt;10.2 Exercise 3.3&lt;/h4&gt;

&lt;p&gt;Write a program to prompt for a score between 0.0 and 1.0. If the score is out of range print an error. If the score is between 0.0 and 1.0, print a grade using the following table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;score=raw_input(&quot;Please input the score!\n&quot;)
try:
    Score = float(score)
    if Score &amp;lt; 0.6 :
        print &quot;Your Grade is F!&quot;
    elif Score &amp;lt; 0.7 :
        print &quot;Your Grade is D!&quot;
    elif Score &amp;lt; 0.8 :
        print &quot;Your Grade is C!&quot;
    elif Score &amp;lt; 0.9 :
        print &quot;Your Grade is B!&quot;
    elif Score &amp;lt; 1.0 :
        print &quot;Your Grade is A!&quot;
    else :
        print &quot;Please enter the right score!&quot;
except:
    Score = -1
if Score &amp;lt; 0 :
    print &quot;Error, please enter numeric input!&quot;
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Liang Zerui</name></author><summary>﻿The concept of conditional execution and basic examples.</summary></entry><entry><title>Week 2 expressions</title><link href="https://arecrui.github.io/Week-2-Expressions/" rel="alternate" type="text/html" title="Week 2 expressions" /><published>2015-07-10T00:00:00+08:00</published><updated>2015-07-10T00:00:00+08:00</updated><id>https://arecrui.github.io/Week 2 Expressions</id><content type="html" xml:base="https://arecrui.github.io/Week-2-Expressions/">&lt;p&gt;﻿This lecture introduces expression and releases first two exercises&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#week-2-expressions&quot; id=&quot;markdown-toc-week-2-expressions&quot;&gt;Week 2 expressions&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#values-and-types&quot; id=&quot;markdown-toc-values-and-types&quot;&gt;1. Values and types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#exercises&quot; id=&quot;markdown-toc-exercises&quot;&gt;15. Exercises&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#exercises-22&quot; id=&quot;markdown-toc-exercises-22&quot;&gt;Exercises 2.2&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;teaser: Python.jpg&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;week-2-expressions&quot;&gt;Week 2 expressions&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;values-and-types&quot;&gt;1. Values and types&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;exercises&quot;&gt;15. Exercises&lt;/h3&gt;

&lt;h3 id=&quot;exercises-22&quot;&gt;Exercises 2.2&lt;/h3&gt;

&lt;p&gt;Write a program that uses raw_input to prompt a user for their name and then welcomes them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Name=raw_input(&#39;Hi! What is your name?\n&#39;)
print &#39;Hello &#39;+ Name + &#39;, welcome to the new world !&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.3 Write a program to prompt the user for hours and rate per hour to compute gross pay&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Hours=raw_input(&quot;How many hours do you work per day?\n&quot;)
Rate=raw_input(&quot;How much do you get paid for an hours?\n&quot;)
TotalHours=float(Hours)* float(Rate)
print &quot;So, you work &quot; + str(TotalHours) + &quot; hours per week?&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.5 Write a program to prompt the user for a Celsius temperature, convert the temperature to Fahrenheit and print out the converted temperature.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Ctemp=raw_input(&quot;Please enter the Celsius temperature:\n&quot;)
Ftemp=(int(Ctemp)*9/5)+32
print str(Ctemp) + &#39; degree celsius is &#39; + str(Ftemp) + &#39; degree fahrenheit!\n &#39;
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Liang Zerui</name></author><summary>﻿This lecture introduces expression and releases first two exercises</summary></entry><entry><title>Week 1 why program</title><link href="https://arecrui.github.io/Week-1-Why-Program/" rel="alternate" type="text/html" title="Week 1 why program" /><published>2015-07-09T00:00:00+08:00</published><updated>2015-07-09T00:00:00+08:00</updated><id>https://arecrui.github.io/Week 1 Why Program</id><content type="html" xml:base="https://arecrui.github.io/Week-1-Why-Program/">&lt;p&gt;﻿关于计算机编程的基础知识&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#week-1-why-program&quot; id=&quot;markdown-toc-week-1-why-program&quot;&gt;Week 1 Why Program?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;第一周&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#python&quot; id=&quot;markdown-toc-python&quot;&gt;欢迎用Python&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;1.1 为什么要编程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;1.2 硬件基础&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#python-1&quot; id=&quot;markdown-toc-python-1&quot;&gt;1.3 Python作为一种编程语言&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#python-2&quot; id=&quot;markdown-toc-python-2&quot;&gt;1.4 撰写Python的段落&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#an-animated-short-python-story&quot; id=&quot;markdown-toc-an-animated-short-python-story&quot;&gt;1.5 An animated short python story&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;
&lt;p&gt;teaser: Python.jpg&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;week-1-why-program&quot;&gt;Week 1 Why Program?&lt;/h1&gt;

&lt;h1 id=&quot;section&quot;&gt;第一周&lt;/h1&gt;

&lt;h2 id=&quot;python&quot;&gt;欢迎用Python&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Python的发明者Guido 介绍为什么要学习&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;1.1 为什么要编程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;人们发明电脑是为了让计算机为我们做事。如果我们不学习计算机的语言，我们就没法告诉计算机我们要做什么。编程就是学习计算机的语言，用计算机能懂的方式命令它按照我们的指令做事。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用户 VS 程序员的区别：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;用户把计算机当做一套工具，比如word，Excel，PPT等程序&lt;/li&gt;
      &lt;li&gt;程序员理解计算机的方式和计算机的语言&lt;/li&gt;
      &lt;li&gt;程序员拥有一些基础工具使他们能够构建给用户使用的工具&lt;/li&gt;
      &lt;li&gt;程序员有时候编写一些大程序给很多人使用（比如浏览器），有时候只是一些小程序解决小问题（比如文件批量重命名工具）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为什么要成为程序员&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;解决自己的问题，比如我需要批量的删除一个问卷里面的某些不想要的字符&lt;/li&gt;
      &lt;li&gt;解决他们的问题，比如制作一个网站后台管理系统，这就是程序员的工作了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;三个相关的概念&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;代码（Code）
    &lt;ul&gt;
      &lt;li&gt;利用一段左右左右的舞蹈的指示来比如代码&lt;/li&gt;
      &lt;li&gt;表达的失误来比喻bug&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;软件（Software）&lt;/li&gt;
  &lt;li&gt;程序（Program）
    &lt;ul&gt;
      &lt;li&gt;比如计算在一个跳跃的段落中算出有多少个the，来表明什么时候需要用到程序&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;1.2 硬件基础&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;几个定义
    &lt;ul&gt;
      &lt;li&gt;中央处理器（Central Processing Unit）：即CPU，俗称计算机的“大脑”，控制程序中指令执行的顺序，总是在问“what’s next?”&lt;/li&gt;
      &lt;li&gt;输入设备（Input Devices）：如键盘、鼠标等&lt;/li&gt;
      &lt;li&gt;输出设备（Output Devices）：显示屏、麦克风、打印机等&lt;/li&gt;
      &lt;li&gt;主存储器（Main Memory）：即主存，相当于计算机的内存，存储容量小且是暂时性的，当机器电源关闭，存于其中的数据就会丢失。&lt;/li&gt;
      &lt;li&gt;辅助存储器（Secondary Memory）：即外存，相当于计算机的硬盘，存储容量大，断电后仍能保存数据，如硬盘、记忆棒等。.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如图所示，程序员在主存那一块活动，将程序记录在主存，然后CPU执行程序中的指令。&lt;/li&gt;
  &lt;li&gt;程序员将指令转换为Source Code（源代码，比如Pyhon），然后通过解释器转换为Machine Language（机器语言，二进制），这样计算机就可以理解程序员了。&lt;/li&gt;
  &lt;li&gt;通过Totally Hot CPU这个视频讲解计算机在运行指令的时候，发热量是非常大的&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;python-1&quot;&gt;1.3 Python作为一种编程语言&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Python是Python解释器使用的编程语言，创始人是Guido van Rossum。&lt;/li&gt;
  &lt;li&gt;语法错误（Syntax Errors）：刚开始学Python，很容易犯错，这是Python中的语法错误&lt;/li&gt;
  &lt;li&gt;在Python的运行窗口中，主提示符“         ”其实就是在问你：what’s next？&lt;/li&gt;
  &lt;li&gt;老师通过随意输入一些代码，演示什么是语法错误，以及演示一个简单的四则运算，讲解什么是正确的语法&lt;/li&gt;
  &lt;li&gt;Python的构成元素
    &lt;ul&gt;
      &lt;li&gt;就像一个故事一样，Python的代码要有开头、中间和结尾&lt;/li&gt;
      &lt;li&gt;变量（Variables）&lt;/li&gt;
      &lt;li&gt;常量（constant）&lt;/li&gt;
      &lt;li&gt;运算器（operator）&lt;/li&gt;
      &lt;li&gt;保留字（Reserved words）：保留字是指已经定义过的字，使用者不能再将这些字作为变量名，如if, while，not,try, else,while等。&lt;/li&gt;
      &lt;li&gt;语句结构（Sentences/lines）：Assignment statement，assigment with expression，print statment&lt;/li&gt;
      &lt;li&gt;故事结构（Story structure）：有目的地构建程序&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;python-2&quot;&gt;1.4 撰写Python的段落&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Python的脚本模型
    &lt;ul&gt;
      &lt;li&gt;交互模式：一句一句地写指令，每句Python都会反应，一般用来演示&lt;/li&gt;
      &lt;li&gt;脚本：大部分的程序都是有很长的段落的，通常会编成1个长的文档，然后在这个文档加上一个py的后缀，这样计算机就能识别出是python的程序&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;程序流程（Program Flow）
    &lt;ul&gt;
      &lt;li&gt;顺序执行（Sequential Steps）&lt;/li&gt;
      &lt;li&gt;条件执行（Conditional Steps）：如if语句&lt;/li&gt;
      &lt;li&gt;循环执行（Repeated Steps）：存在迭代变量（iteration variables）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;an-animated-short-python-story&quot;&gt;1.5 An animated short python story&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;解释程序其实就是把人的思想分解，比如在一个数字图表中，人是如何找出最大的数字的&lt;/li&gt;
  &lt;li&gt;再次思考，计算机在下面的三个场景中如何找出最大的数字，有点像在解释算法的精神：
    &lt;ul&gt;
      &lt;li&gt;第一个是全部显示，但是屏幕移动；&lt;/li&gt;
      &lt;li&gt;第二个把数字颠倒；&lt;/li&gt;
      &lt;li&gt;第三个逐个显示；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Liang Zerui</name></author><summary>﻿关于计算机编程的基础知识</summary></entry></feed>
